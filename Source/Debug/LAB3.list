
LAB3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024c0  080024c0  000124c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e4  080024e4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080024e4  080024e4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e4  080024e4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e4  080024e4  000124e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080024ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000001c  08002508  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002508  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f9d  00000000  00000000  00020045  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f6  00000000  00000000  00028fe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a30  00000000  00000000  0002a8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001867  00000000  00000000  0002bc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b026  00000000  00000000  0002d4af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000825cb  00000000  00000000  000384d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000baaa0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002870  00000000  00000000  000baaf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000001c 	.word	0x2000001c
 8000128:	00000000 	.word	0x00000000
 800012c:	080024a8 	.word	0x080024a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000020 	.word	0x20000020
 8000148:	080024a8 	.word	0x080024a8

0800014c <fsm_automatic_run1>:
 */


#include "global.h"

void fsm_automatic_run1(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	switch(status1){
 8000150:	4b26      	ldr	r3, [pc, #152]	; (80001ec <fsm_automatic_run1+0xa0>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	3b01      	subs	r3, #1
 8000156:	2b03      	cmp	r3, #3
 8000158:	d83e      	bhi.n	80001d8 <fsm_automatic_run1+0x8c>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <fsm_automatic_run1+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000171 	.word	0x08000171
 8000164:	08000185 	.word	0x08000185
 8000168:	080001a1 	.word	0x080001a1
 800016c:	080001bd 	.word	0x080001bd
	case INIT:
		//TODO
		setInit();
 8000170:	f000 f89a 	bl	80002a8 <setInit>

		status1 = AUTO_RED_1;
 8000174:	4b1d      	ldr	r3, [pc, #116]	; (80001ec <fsm_automatic_run1+0xa0>)
 8000176:	2202      	movs	r2, #2
 8000178:	601a      	str	r2, [r3, #0]
		setTimer1(5000);
 800017a:	f241 3088 	movw	r0, #5000	; 0x1388
 800017e:	f000 fd33 	bl	8000be8 <setTimer1>
		break;
 8000182:	e030      	b.n	80001e6 <fsm_automatic_run1+0x9a>

	case AUTO_RED_1:
		setRed_1();
 8000184:	f000 f8b4 	bl	80002f0 <setRed_1>
		if (timer1_flag == 1){
 8000188:	4b19      	ldr	r3, [pc, #100]	; (80001f0 <fsm_automatic_run1+0xa4>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	2b01      	cmp	r3, #1
 800018e:	d125      	bne.n	80001dc <fsm_automatic_run1+0x90>
			status1 = AUTO_GREEN_1;
 8000190:	4b16      	ldr	r3, [pc, #88]	; (80001ec <fsm_automatic_run1+0xa0>)
 8000192:	2203      	movs	r2, #3
 8000194:	601a      	str	r2, [r3, #0]
			setTimer1(3000);
 8000196:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800019a:	f000 fd25 	bl	8000be8 <setTimer1>

//		if (isButton0Pressed() == 1){
//			status1 = MAN_RED;
//			setTimer1(10000);
//		}
		break;
 800019e:	e01d      	b.n	80001dc <fsm_automatic_run1+0x90>

	case AUTO_GREEN_1:
		setGreen_1();
 80001a0:	f000 f8bc 	bl	800031c <setGreen_1>
		if (timer1_flag == 1){
 80001a4:	4b12      	ldr	r3, [pc, #72]	; (80001f0 <fsm_automatic_run1+0xa4>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d119      	bne.n	80001e0 <fsm_automatic_run1+0x94>
			status1 = AUTO_YELLOW_1;
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <fsm_automatic_run1+0xa0>)
 80001ae:	2204      	movs	r2, #4
 80001b0:	601a      	str	r2, [r3, #0]
			setTimer1(2000);
 80001b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001b6:	f000 fd17 	bl	8000be8 <setTimer1>
		}

		break;
 80001ba:	e011      	b.n	80001e0 <fsm_automatic_run1+0x94>


	case AUTO_YELLOW_1:
		setYellow_1();
 80001bc:	f000 f8c4 	bl	8000348 <setYellow_1>

		if (timer1_flag == 1){
 80001c0:	4b0b      	ldr	r3, [pc, #44]	; (80001f0 <fsm_automatic_run1+0xa4>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	2b01      	cmp	r3, #1
 80001c6:	d10d      	bne.n	80001e4 <fsm_automatic_run1+0x98>
			status1 = AUTO_RED_1;
 80001c8:	4b08      	ldr	r3, [pc, #32]	; (80001ec <fsm_automatic_run1+0xa0>)
 80001ca:	2202      	movs	r2, #2
 80001cc:	601a      	str	r2, [r3, #0]
			setTimer1(5000);
 80001ce:	f241 3088 	movw	r0, #5000	; 0x1388
 80001d2:	f000 fd09 	bl	8000be8 <setTimer1>
		}
		break;
 80001d6:	e005      	b.n	80001e4 <fsm_automatic_run1+0x98>

	default:
		break;
 80001d8:	bf00      	nop
 80001da:	e004      	b.n	80001e6 <fsm_automatic_run1+0x9a>
		break;
 80001dc:	bf00      	nop
 80001de:	e002      	b.n	80001e6 <fsm_automatic_run1+0x9a>
		break;
 80001e0:	bf00      	nop
 80001e2:	e000      	b.n	80001e6 <fsm_automatic_run1+0x9a>
		break;
 80001e4:	bf00      	nop
	}
}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000038 	.word	0x20000038
 80001f0:	20000050 	.word	0x20000050

080001f4 <fsm_automatic_run2>:


void fsm_automatic_run2(){
 80001f4:	b580      	push	{r7, lr}
 80001f6:	af00      	add	r7, sp, #0
	switch (status2){
 80001f8:	4b29      	ldr	r3, [pc, #164]	; (80002a0 <fsm_automatic_run2+0xac>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	3b01      	subs	r3, #1
 80001fe:	2b06      	cmp	r3, #6
 8000200:	d844      	bhi.n	800028c <fsm_automatic_run2+0x98>
 8000202:	a201      	add	r2, pc, #4	; (adr r2, 8000208 <fsm_automatic_run2+0x14>)
 8000204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000208:	08000225 	.word	0x08000225
 800020c:	0800028d 	.word	0x0800028d
 8000210:	0800028d 	.word	0x0800028d
 8000214:	0800028d 	.word	0x0800028d
 8000218:	08000239 	.word	0x08000239
 800021c:	08000255 	.word	0x08000255
 8000220:	08000271 	.word	0x08000271
	case INIT:
		setInit();
 8000224:	f000 f840 	bl	80002a8 <setInit>
		status2 = AUTO_GREEN_2;
 8000228:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <fsm_automatic_run2+0xac>)
 800022a:	2206      	movs	r2, #6
 800022c:	601a      	str	r2, [r3, #0]
		setTimer2(3000);
 800022e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000232:	f000 fcf5 	bl	8000c20 <setTimer2>
		break;
 8000236:	e030      	b.n	800029a <fsm_automatic_run2+0xa6>
	case AUTO_RED_2:
		setRed_2();
 8000238:	f000 f89c 	bl	8000374 <setRed_2>
		if (timer2_flag == 1){
 800023c:	4b19      	ldr	r3, [pc, #100]	; (80002a4 <fsm_automatic_run2+0xb0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2b01      	cmp	r3, #1
 8000242:	d125      	bne.n	8000290 <fsm_automatic_run2+0x9c>
			status2 = AUTO_GREEN_2;
 8000244:	4b16      	ldr	r3, [pc, #88]	; (80002a0 <fsm_automatic_run2+0xac>)
 8000246:	2206      	movs	r2, #6
 8000248:	601a      	str	r2, [r3, #0]
			setTimer2(3000);
 800024a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800024e:	f000 fce7 	bl	8000c20 <setTimer2>

//		if (isButton0Pressed() == 1){
//			status2 = MAN_RED;
//			setTimer2(10000);
//		}
		break;
 8000252:	e01d      	b.n	8000290 <fsm_automatic_run2+0x9c>

	case AUTO_GREEN_2:
		setGreen_2();
 8000254:	f000 f8a4 	bl	80003a0 <setGreen_2>
		if (timer2_flag == 1){
 8000258:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <fsm_automatic_run2+0xb0>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b01      	cmp	r3, #1
 800025e:	d119      	bne.n	8000294 <fsm_automatic_run2+0xa0>
			status2 = AUTO_YELLOW_2;
 8000260:	4b0f      	ldr	r3, [pc, #60]	; (80002a0 <fsm_automatic_run2+0xac>)
 8000262:	2207      	movs	r2, #7
 8000264:	601a      	str	r2, [r3, #0]
			setTimer2(2000);
 8000266:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800026a:	f000 fcd9 	bl	8000c20 <setTimer2>
		}

		break;
 800026e:	e011      	b.n	8000294 <fsm_automatic_run2+0xa0>


	case AUTO_YELLOW_2:
		setYellow_2();
 8000270:	f000 f8ac 	bl	80003cc <setYellow_2>

		if (timer2_flag == 1){
 8000274:	4b0b      	ldr	r3, [pc, #44]	; (80002a4 <fsm_automatic_run2+0xb0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b01      	cmp	r3, #1
 800027a:	d10d      	bne.n	8000298 <fsm_automatic_run2+0xa4>
			status2 = AUTO_RED_2;
 800027c:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <fsm_automatic_run2+0xac>)
 800027e:	2205      	movs	r2, #5
 8000280:	601a      	str	r2, [r3, #0]
			setTimer2(5000);
 8000282:	f241 3088 	movw	r0, #5000	; 0x1388
 8000286:	f000 fccb 	bl	8000c20 <setTimer2>
		}
		break;
 800028a:	e005      	b.n	8000298 <fsm_automatic_run2+0xa4>
	default:
		break;
 800028c:	bf00      	nop
 800028e:	e004      	b.n	800029a <fsm_automatic_run2+0xa6>
		break;
 8000290:	bf00      	nop
 8000292:	e002      	b.n	800029a <fsm_automatic_run2+0xa6>
		break;
 8000294:	bf00      	nop
 8000296:	e000      	b.n	800029a <fsm_automatic_run2+0xa6>
		break;
 8000298:	bf00      	nop
	}
}
 800029a:	bf00      	nop
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	2000003c 	.word	0x2000003c
 80002a4:	20000058 	.word	0x20000058

080002a8 <setInit>:
int led_buffer[4] = {1, 2, 3, 4};
int hour = 15, minute = 59, second = 0;
int second1 = 0, second2 = 0;
int index_led = 0;

void setInit(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 80002ac:	2200      	movs	r2, #0
 80002ae:	2101      	movs	r1, #1
 80002b0:	480e      	ldr	r0, [pc, #56]	; (80002ec <setInit+0x44>)
 80002b2:	f001 f8fd 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2102      	movs	r1, #2
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <setInit+0x44>)
 80002bc:	f001 f8f8 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2104      	movs	r1, #4
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <setInit+0x44>)
 80002c6:	f001 f8f3 	bl	80014b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2108      	movs	r1, #8
 80002ce:	4807      	ldr	r0, [pc, #28]	; (80002ec <setInit+0x44>)
 80002d0:	f001 f8ee 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2110      	movs	r1, #16
 80002d8:	4804      	ldr	r0, [pc, #16]	; (80002ec <setInit+0x44>)
 80002da:	f001 f8e9 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2120      	movs	r1, #32
 80002e2:	4802      	ldr	r0, [pc, #8]	; (80002ec <setInit+0x44>)
 80002e4:	f001 f8e4 	bl	80014b0 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010c00 	.word	0x40010c00

080002f0 <setRed_1>:
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_SET);
}

void setRed_1(){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_SET);
 80002f4:	2201      	movs	r2, #1
 80002f6:	2101      	movs	r1, #1
 80002f8:	4807      	ldr	r0, [pc, #28]	; (8000318 <setRed_1+0x28>)
 80002fa:	f001 f8d9 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 80002fe:	2200      	movs	r2, #0
 8000300:	2102      	movs	r1, #2
 8000302:	4805      	ldr	r0, [pc, #20]	; (8000318 <setRed_1+0x28>)
 8000304:	f001 f8d4 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2104      	movs	r1, #4
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <setRed_1+0x28>)
 800030e:	f001 f8cf 	bl	80014b0 <HAL_GPIO_WritePin>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40010c00 	.word	0x40010c00

0800031c <setGreen_1>:

void setGreen_1(){
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);;
 8000320:	2200      	movs	r2, #0
 8000322:	2101      	movs	r1, #1
 8000324:	4807      	ldr	r0, [pc, #28]	; (8000344 <setGreen_1+0x28>)
 8000326:	f001 f8c3 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2102      	movs	r1, #2
 800032e:	4805      	ldr	r0, [pc, #20]	; (8000344 <setGreen_1+0x28>)
 8000330:	f001 f8be 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_RESET);
 8000334:	2200      	movs	r2, #0
 8000336:	2104      	movs	r1, #4
 8000338:	4802      	ldr	r0, [pc, #8]	; (8000344 <setGreen_1+0x28>)
 800033a:	f001 f8b9 	bl	80014b0 <HAL_GPIO_WritePin>
}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	40010c00 	.word	0x40010c00

08000348 <setYellow_1>:

void setYellow_1(){
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_1_RED_GPIO_Port, LED_1_RED_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	2101      	movs	r1, #1
 8000350:	4807      	ldr	r0, [pc, #28]	; (8000370 <setYellow_1+0x28>)
 8000352:	f001 f8ad 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_GREEN_GPIO_Port, LED_1_GREEN_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	2102      	movs	r1, #2
 800035a:	4805      	ldr	r0, [pc, #20]	; (8000370 <setYellow_1+0x28>)
 800035c:	f001 f8a8 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_1_YELLOW_GPIO_Port, LED_1_YELLOW_Pin, GPIO_PIN_SET);
 8000360:	2201      	movs	r2, #1
 8000362:	2104      	movs	r1, #4
 8000364:	4802      	ldr	r0, [pc, #8]	; (8000370 <setYellow_1+0x28>)
 8000366:	f001 f8a3 	bl	80014b0 <HAL_GPIO_WritePin>
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40010c00 	.word	0x40010c00

08000374 <setRed_2>:


void setRed_2(){
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_SET);
 8000378:	2201      	movs	r2, #1
 800037a:	2108      	movs	r1, #8
 800037c:	4807      	ldr	r0, [pc, #28]	; (800039c <setRed_2+0x28>)
 800037e:	f001 f897 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2110      	movs	r1, #16
 8000386:	4805      	ldr	r0, [pc, #20]	; (800039c <setRed_2+0x28>)
 8000388:	f001 f892 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	2120      	movs	r1, #32
 8000390:	4802      	ldr	r0, [pc, #8]	; (800039c <setRed_2+0x28>)
 8000392:	f001 f88d 	bl	80014b0 <HAL_GPIO_WritePin>
}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	40010c00 	.word	0x40010c00

080003a0 <setGreen_2>:

void setGreen_2(){
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);;
 80003a4:	2200      	movs	r2, #0
 80003a6:	2108      	movs	r1, #8
 80003a8:	4807      	ldr	r0, [pc, #28]	; (80003c8 <setGreen_2+0x28>)
 80003aa:	f001 f881 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_SET);
 80003ae:	2201      	movs	r2, #1
 80003b0:	2110      	movs	r1, #16
 80003b2:	4805      	ldr	r0, [pc, #20]	; (80003c8 <setGreen_2+0x28>)
 80003b4:	f001 f87c 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	2120      	movs	r1, #32
 80003bc:	4802      	ldr	r0, [pc, #8]	; (80003c8 <setGreen_2+0x28>)
 80003be:	f001 f877 	bl	80014b0 <HAL_GPIO_WritePin>
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	40010c00 	.word	0x40010c00

080003cc <setYellow_2>:

void setYellow_2(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_2_RED_GPIO_Port, LED_2_RED_Pin, GPIO_PIN_RESET);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2108      	movs	r1, #8
 80003d4:	4807      	ldr	r0, [pc, #28]	; (80003f4 <setYellow_2+0x28>)
 80003d6:	f001 f86b 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_GREEN_GPIO_Port, LED_2_GREEN_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2110      	movs	r1, #16
 80003de:	4805      	ldr	r0, [pc, #20]	; (80003f4 <setYellow_2+0x28>)
 80003e0:	f001 f866 	bl	80014b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_2_YELLOW_GPIO_Port, LED_2_YELLOW_Pin, GPIO_PIN_SET);
 80003e4:	2201      	movs	r2, #1
 80003e6:	2120      	movs	r1, #32
 80003e8:	4802      	ldr	r0, [pc, #8]	; (80003f4 <setYellow_2+0x28>)
 80003ea:	f001 f861 	bl	80014b0 <HAL_GPIO_WritePin>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <display7SEG>:
void display7SEG(int num){
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b09      	cmp	r3, #9
 8000404:	f200 81c8 	bhi.w	8000798 <display7SEG+0x3a0>
 8000408:	a201      	add	r2, pc, #4	; (adr r2, 8000410 <display7SEG+0x18>)
 800040a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040e:	bf00      	nop
 8000410:	08000439 	.word	0x08000439
 8000414:	0800048f 	.word	0x0800048f
 8000418:	080004e5 	.word	0x080004e5
 800041c:	0800053b 	.word	0x0800053b
 8000420:	08000591 	.word	0x08000591
 8000424:	080005e7 	.word	0x080005e7
 8000428:	0800063d 	.word	0x0800063d
 800042c:	08000693 	.word	0x08000693
 8000430:	080006e9 	.word	0x080006e9
 8000434:	0800073f 	.word	0x0800073f
	switch(num){
	case 0:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800043e:	48d5      	ldr	r0, [pc, #852]	; (8000794 <display7SEG+0x39c>)
 8000440:	f001 f836 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800044a:	48d2      	ldr	r0, [pc, #840]	; (8000794 <display7SEG+0x39c>)
 800044c:	f001 f830 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000456:	48cf      	ldr	r0, [pc, #828]	; (8000794 <display7SEG+0x39c>)
 8000458:	f001 f82a 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000462:	48cc      	ldr	r0, [pc, #816]	; (8000794 <display7SEG+0x39c>)
 8000464:	f001 f824 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046e:	48c9      	ldr	r0, [pc, #804]	; (8000794 <display7SEG+0x39c>)
 8000470:	f001 f81e 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800047a:	48c6      	ldr	r0, [pc, #792]	; (8000794 <display7SEG+0x39c>)
 800047c:	f001 f818 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000486:	48c3      	ldr	r0, [pc, #780]	; (8000794 <display7SEG+0x39c>)
 8000488:	f001 f812 	bl	80014b0 <HAL_GPIO_WritePin>
		break;
 800048c:	e185      	b.n	800079a <display7SEG+0x3a2>
	case 1:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000494:	48bf      	ldr	r0, [pc, #764]	; (8000794 <display7SEG+0x39c>)
 8000496:	f001 f80b 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004a0:	48bc      	ldr	r0, [pc, #752]	; (8000794 <display7SEG+0x39c>)
 80004a2:	f001 f805 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ac:	48b9      	ldr	r0, [pc, #740]	; (8000794 <display7SEG+0x39c>)
 80004ae:	f000 ffff 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004b8:	48b6      	ldr	r0, [pc, #728]	; (8000794 <display7SEG+0x39c>)
 80004ba:	f000 fff9 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80004be:	2201      	movs	r2, #1
 80004c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004c4:	48b3      	ldr	r0, [pc, #716]	; (8000794 <display7SEG+0x39c>)
 80004c6:	f000 fff3 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80004ca:	2201      	movs	r2, #1
 80004cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d0:	48b0      	ldr	r0, [pc, #704]	; (8000794 <display7SEG+0x39c>)
 80004d2:	f000 ffed 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80004d6:	2201      	movs	r2, #1
 80004d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004dc:	48ad      	ldr	r0, [pc, #692]	; (8000794 <display7SEG+0x39c>)
 80004de:	f000 ffe7 	bl	80014b0 <HAL_GPIO_WritePin>
		break;
 80004e2:	e15a      	b.n	800079a <display7SEG+0x3a2>
	case 2:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80004e4:	2200      	movs	r2, #0
 80004e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004ea:	48aa      	ldr	r0, [pc, #680]	; (8000794 <display7SEG+0x39c>)
 80004ec:	f000 ffe0 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f6:	48a7      	ldr	r0, [pc, #668]	; (8000794 <display7SEG+0x39c>)
 80004f8:	f000 ffda 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000502:	48a4      	ldr	r0, [pc, #656]	; (8000794 <display7SEG+0x39c>)
 8000504:	f000 ffd4 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050e:	48a1      	ldr	r0, [pc, #644]	; (8000794 <display7SEG+0x39c>)
 8000510:	f000 ffce 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800051a:	489e      	ldr	r0, [pc, #632]	; (8000794 <display7SEG+0x39c>)
 800051c:	f000 ffc8 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000526:	489b      	ldr	r0, [pc, #620]	; (8000794 <display7SEG+0x39c>)
 8000528:	f000 ffc2 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000532:	4898      	ldr	r0, [pc, #608]	; (8000794 <display7SEG+0x39c>)
 8000534:	f000 ffbc 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 8000538:	e12f      	b.n	800079a <display7SEG+0x3a2>
	case 3:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000540:	4894      	ldr	r0, [pc, #592]	; (8000794 <display7SEG+0x39c>)
 8000542:	f000 ffb5 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054c:	4891      	ldr	r0, [pc, #580]	; (8000794 <display7SEG+0x39c>)
 800054e:	f000 ffaf 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000552:	2200      	movs	r2, #0
 8000554:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000558:	488e      	ldr	r0, [pc, #568]	; (8000794 <display7SEG+0x39c>)
 800055a:	f000 ffa9 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000564:	488b      	ldr	r0, [pc, #556]	; (8000794 <display7SEG+0x39c>)
 8000566:	f000 ffa3 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000570:	4888      	ldr	r0, [pc, #544]	; (8000794 <display7SEG+0x39c>)
 8000572:	f000 ff9d 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 8000576:	2201      	movs	r2, #1
 8000578:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800057c:	4885      	ldr	r0, [pc, #532]	; (8000794 <display7SEG+0x39c>)
 800057e:	f000 ff97 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000588:	4882      	ldr	r0, [pc, #520]	; (8000794 <display7SEG+0x39c>)
 800058a:	f000 ff91 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 800058e:	e104      	b.n	800079a <display7SEG+0x3a2>
	case 4:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, SET);
 8000590:	2201      	movs	r2, #1
 8000592:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000596:	487f      	ldr	r0, [pc, #508]	; (8000794 <display7SEG+0x39c>)
 8000598:	f000 ff8a 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a2:	487c      	ldr	r0, [pc, #496]	; (8000794 <display7SEG+0x39c>)
 80005a4:	f000 ff84 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ae:	4879      	ldr	r0, [pc, #484]	; (8000794 <display7SEG+0x39c>)
 80005b0:	f000 ff7e 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ba:	4876      	ldr	r0, [pc, #472]	; (8000794 <display7SEG+0x39c>)
 80005bc:	f000 ff78 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80005c0:	2201      	movs	r2, #1
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	4873      	ldr	r0, [pc, #460]	; (8000794 <display7SEG+0x39c>)
 80005c8:	f000 ff72 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d2:	4870      	ldr	r0, [pc, #448]	; (8000794 <display7SEG+0x39c>)
 80005d4:	f000 ff6c 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005de:	486d      	ldr	r0, [pc, #436]	; (8000794 <display7SEG+0x39c>)
 80005e0:	f000 ff66 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 80005e4:	e0d9      	b.n	800079a <display7SEG+0x3a2>
	case 5:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ec:	4869      	ldr	r0, [pc, #420]	; (8000794 <display7SEG+0x39c>)
 80005ee:	f000 ff5f 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 80005f2:	2201      	movs	r2, #1
 80005f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f8:	4866      	ldr	r0, [pc, #408]	; (8000794 <display7SEG+0x39c>)
 80005fa:	f000 ff59 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000604:	4863      	ldr	r0, [pc, #396]	; (8000794 <display7SEG+0x39c>)
 8000606:	f000 ff53 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000610:	4860      	ldr	r0, [pc, #384]	; (8000794 <display7SEG+0x39c>)
 8000612:	f000 ff4d 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 8000616:	2201      	movs	r2, #1
 8000618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061c:	485d      	ldr	r0, [pc, #372]	; (8000794 <display7SEG+0x39c>)
 800061e:	f000 ff47 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000628:	485a      	ldr	r0, [pc, #360]	; (8000794 <display7SEG+0x39c>)
 800062a:	f000 ff41 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	4857      	ldr	r0, [pc, #348]	; (8000794 <display7SEG+0x39c>)
 8000636:	f000 ff3b 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 800063a:	e0ae      	b.n	800079a <display7SEG+0x3a2>
	case 6:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800063c:	2200      	movs	r2, #0
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4854      	ldr	r0, [pc, #336]	; (8000794 <display7SEG+0x39c>)
 8000644:	f000 ff34 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, SET);
 8000648:	2201      	movs	r2, #1
 800064a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800064e:	4851      	ldr	r0, [pc, #324]	; (8000794 <display7SEG+0x39c>)
 8000650:	f000 ff2e 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800065a:	484e      	ldr	r0, [pc, #312]	; (8000794 <display7SEG+0x39c>)
 800065c:	f000 ff28 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000666:	484b      	ldr	r0, [pc, #300]	; (8000794 <display7SEG+0x39c>)
 8000668:	f000 ff22 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000672:	4848      	ldr	r0, [pc, #288]	; (8000794 <display7SEG+0x39c>)
 8000674:	f000 ff1c 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067e:	4845      	ldr	r0, [pc, #276]	; (8000794 <display7SEG+0x39c>)
 8000680:	f000 ff16 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800068a:	4842      	ldr	r0, [pc, #264]	; (8000794 <display7SEG+0x39c>)
 800068c:	f000 ff10 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 8000690:	e083      	b.n	800079a <display7SEG+0x3a2>
	case 7:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000698:	483e      	ldr	r0, [pc, #248]	; (8000794 <display7SEG+0x39c>)
 800069a:	f000 ff09 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006a4:	483b      	ldr	r0, [pc, #236]	; (8000794 <display7SEG+0x39c>)
 80006a6:	f000 ff03 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b0:	4838      	ldr	r0, [pc, #224]	; (8000794 <display7SEG+0x39c>)
 80006b2:	f000 fefd 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006bc:	4835      	ldr	r0, [pc, #212]	; (8000794 <display7SEG+0x39c>)
 80006be:	f000 fef7 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c8:	4832      	ldr	r0, [pc, #200]	; (8000794 <display7SEG+0x39c>)
 80006ca:	f000 fef1 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, SET);
 80006ce:	2201      	movs	r2, #1
 80006d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006d4:	482f      	ldr	r0, [pc, #188]	; (8000794 <display7SEG+0x39c>)
 80006d6:	f000 feeb 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006e0:	482c      	ldr	r0, [pc, #176]	; (8000794 <display7SEG+0x39c>)
 80006e2:	f000 fee5 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 80006e6:	e058      	b.n	800079a <display7SEG+0x3a2>
	case 8:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ee:	4829      	ldr	r0, [pc, #164]	; (8000794 <display7SEG+0x39c>)
 80006f0:	f000 fede 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 80006f4:	2200      	movs	r2, #0
 80006f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006fa:	4826      	ldr	r0, [pc, #152]	; (8000794 <display7SEG+0x39c>)
 80006fc:	f000 fed8 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000706:	4823      	ldr	r0, [pc, #140]	; (8000794 <display7SEG+0x39c>)
 8000708:	f000 fed2 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000712:	4820      	ldr	r0, [pc, #128]	; (8000794 <display7SEG+0x39c>)
 8000714:	f000 fecc 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800071e:	481d      	ldr	r0, [pc, #116]	; (8000794 <display7SEG+0x39c>)
 8000720:	f000 fec6 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072a:	481a      	ldr	r0, [pc, #104]	; (8000794 <display7SEG+0x39c>)
 800072c:	f000 fec0 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000736:	4817      	ldr	r0, [pc, #92]	; (8000794 <display7SEG+0x39c>)
 8000738:	f000 feba 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 800073c:	e02d      	b.n	800079a <display7SEG+0x3a2>
	case 9:
		HAL_GPIO_WritePin(SEG_0_GPIO_Port, SEG_0_Pin, RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000744:	4813      	ldr	r0, [pc, #76]	; (8000794 <display7SEG+0x39c>)
 8000746:	f000 feb3 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_1_GPIO_Port, SEG_1_Pin, RESET);
 800074a:	2200      	movs	r2, #0
 800074c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000750:	4810      	ldr	r0, [pc, #64]	; (8000794 <display7SEG+0x39c>)
 8000752:	f000 fead 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_2_GPIO_Port, SEG_2_Pin, RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <display7SEG+0x39c>)
 800075e:	f000 fea7 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_3_GPIO_Port, SEG_3_Pin, RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000768:	480a      	ldr	r0, [pc, #40]	; (8000794 <display7SEG+0x39c>)
 800076a:	f000 fea1 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_4_GPIO_Port, SEG_4_Pin, SET);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <display7SEG+0x39c>)
 8000776:	f000 fe9b 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_5_GPIO_Port, SEG_5_Pin, RESET);
 800077a:	2200      	movs	r2, #0
 800077c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000780:	4804      	ldr	r0, [pc, #16]	; (8000794 <display7SEG+0x39c>)
 8000782:	f000 fe95 	bl	80014b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG_6_GPIO_Port, SEG_6_Pin, RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800078c:	4801      	ldr	r0, [pc, #4]	; (8000794 <display7SEG+0x39c>)
 800078e:	f000 fe8f 	bl	80014b0 <HAL_GPIO_WritePin>
			break;
 8000792:	e002      	b.n	800079a <display7SEG+0x3a2>
 8000794:	40010800 	.word	0x40010800
	default:
			break;
 8000798:	bf00      	nop
	}
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop

080007a4 <update7SEG>:

void update7SEG (int index){
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	index = index%4;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	425a      	negs	r2, r3
 80007b0:	f003 0303 	and.w	r3, r3, #3
 80007b4:	f002 0203 	and.w	r2, r2, #3
 80007b8:	bf58      	it	pl
 80007ba:	4253      	negpl	r3, r2
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	2b03      	cmp	r3, #3
 80007c2:	d87b      	bhi.n	80008bc <update7SEG+0x118>
 80007c4:	a201      	add	r2, pc, #4	; (adr r2, 80007cc <update7SEG+0x28>)
 80007c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ca:	bf00      	nop
 80007cc:	080007dd 	.word	0x080007dd
 80007d0:	08000815 	.word	0x08000815
 80007d4:	0800084d 	.word	0x0800084d
 80007d8:	08000885 	.word	0x08000885
	switch (index){
	case 0:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	2102      	movs	r1, #2
 80007e0:	4839      	ldr	r0, [pc, #228]	; (80008c8 <update7SEG+0x124>)
 80007e2:	f000 fe65 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80007e6:	2201      	movs	r2, #1
 80007e8:	2104      	movs	r1, #4
 80007ea:	4837      	ldr	r0, [pc, #220]	; (80008c8 <update7SEG+0x124>)
 80007ec:	f000 fe60 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2108      	movs	r1, #8
 80007f4:	4834      	ldr	r0, [pc, #208]	; (80008c8 <update7SEG+0x124>)
 80007f6:	f000 fe5b 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	4832      	ldr	r0, [pc, #200]	; (80008c8 <update7SEG+0x124>)
 8000800:	f000 fe56 	bl	80014b0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 8000804:	4a31      	ldr	r2, [pc, #196]	; (80008cc <update7SEG+0x128>)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff fdf3 	bl	80003f8 <display7SEG>
		break;
 8000812:	e054      	b.n	80008be <update7SEG+0x11a>
	case 1:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000814:	2201      	movs	r2, #1
 8000816:	2102      	movs	r1, #2
 8000818:	482b      	ldr	r0, [pc, #172]	; (80008c8 <update7SEG+0x124>)
 800081a:	f000 fe49 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2104      	movs	r1, #4
 8000822:	4829      	ldr	r0, [pc, #164]	; (80008c8 <update7SEG+0x124>)
 8000824:	f000 fe44 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2108      	movs	r1, #8
 800082c:	4826      	ldr	r0, [pc, #152]	; (80008c8 <update7SEG+0x124>)
 800082e:	f000 fe3f 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2110      	movs	r1, #16
 8000836:	4824      	ldr	r0, [pc, #144]	; (80008c8 <update7SEG+0x124>)
 8000838:	f000 fe3a 	bl	80014b0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 800083c:	4a23      	ldr	r2, [pc, #140]	; (80008cc <update7SEG+0x128>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff fdd7 	bl	80003f8 <display7SEG>
		break;
 800084a:	e038      	b.n	80008be <update7SEG+0x11a>
	case 2:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2102      	movs	r1, #2
 8000850:	481d      	ldr	r0, [pc, #116]	; (80008c8 <update7SEG+0x124>)
 8000852:	f000 fe2d 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2104      	movs	r1, #4
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <update7SEG+0x124>)
 800085c:	f000 fe28 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	2108      	movs	r1, #8
 8000864:	4818      	ldr	r0, [pc, #96]	; (80008c8 <update7SEG+0x124>)
 8000866:	f000 fe23 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2110      	movs	r1, #16
 800086e:	4816      	ldr	r0, [pc, #88]	; (80008c8 <update7SEG+0x124>)
 8000870:	f000 fe1e 	bl	80014b0 <HAL_GPIO_WritePin>
		 display7SEG(led_buffer[index]);
 8000874:	4a15      	ldr	r2, [pc, #84]	; (80008cc <update7SEG+0x128>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fdbb 	bl	80003f8 <display7SEG>
		break;
 8000882:	e01c      	b.n	80008be <update7SEG+0x11a>
	case 3:
		  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000884:	2201      	movs	r2, #1
 8000886:	2102      	movs	r1, #2
 8000888:	480f      	ldr	r0, [pc, #60]	; (80008c8 <update7SEG+0x124>)
 800088a:	f000 fe11 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2104      	movs	r1, #4
 8000892:	480d      	ldr	r0, [pc, #52]	; (80008c8 <update7SEG+0x124>)
 8000894:	f000 fe0c 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2108      	movs	r1, #8
 800089c:	480a      	ldr	r0, [pc, #40]	; (80008c8 <update7SEG+0x124>)
 800089e:	f000 fe07 	bl	80014b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2110      	movs	r1, #16
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <update7SEG+0x124>)
 80008a8:	f000 fe02 	bl	80014b0 <HAL_GPIO_WritePin>
		display7SEG(led_buffer[index]);
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <update7SEG+0x128>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fd9f 	bl	80003f8 <display7SEG>
		break;
 80008ba:	e000      	b.n	80008be <update7SEG+0x11a>
	default:
		break;
 80008bc:	bf00      	nop
	}
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010800 	.word	0x40010800
 80008cc:	20000000 	.word	0x20000000

080008d0 <updateClockBuffer>:


void updateClockBuffer(){
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	  second1--;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <updateClockBuffer+0x4c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	4a10      	ldr	r2, [pc, #64]	; (800091c <updateClockBuffer+0x4c>)
 80008dc:	6013      	str	r3, [r2, #0]
	  if (second1 <= 0){
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <updateClockBuffer+0x4c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	dc07      	bgt.n	80008f6 <updateClockBuffer+0x26>
		  second1 = 9;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <updateClockBuffer+0x4c>)
 80008e8:	2209      	movs	r2, #9
 80008ea:	601a      	str	r2, [r3, #0]
		  second2--;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <updateClockBuffer+0x50>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3b01      	subs	r3, #1
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <updateClockBuffer+0x50>)
 80008f4:	6013      	str	r3, [r2, #0]
	  }
	  if (second2 <= 0){
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <updateClockBuffer+0x50>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	dc02      	bgt.n	8000904 <updateClockBuffer+0x34>
		  second2 = 6;
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <updateClockBuffer+0x50>)
 8000900:	2206      	movs	r2, #6
 8000902:	601a      	str	r2, [r3, #0]
	  }
	  led_buffer[0] = second1;
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <updateClockBuffer+0x4c>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <updateClockBuffer+0x54>)
 800090a:	6013      	str	r3, [r2, #0]
	  led_buffer[1] = second2;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <updateClockBuffer+0x50>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <updateClockBuffer+0x54>)
 8000912:	6053      	str	r3, [r2, #4]
//	  led_buffer[2] = minute/10;
//	  led_buffer[3] = minute%10;

}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	20000040 	.word	0x20000040
 8000920:	20000044 	.word	0x20000044
 8000924:	20000000 	.word	0x20000000

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 fad6 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f844 	bl	80009bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f000 f8ca 	bl	8000acc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000938:	f000 f87c 	bl	8000a34 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800093c:	4819      	ldr	r0, [pc, #100]	; (80009a4 <main+0x7c>)
 800093e:	f001 f9fb 	bl	8001d38 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status1 = INIT;
 8000942:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <main+0x80>)
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
  status2 = INIT;
 8000948:	4b18      	ldr	r3, [pc, #96]	; (80009ac <main+0x84>)
 800094a:	2201      	movs	r2, #1
 800094c:	601a      	str	r2, [r3, #0]
  setTimer1(100);
 800094e:	2064      	movs	r0, #100	; 0x64
 8000950:	f000 f94a 	bl	8000be8 <setTimer1>
  setTimer2(100);
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f000 f963 	bl	8000c20 <setTimer2>
  setTimer3(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f000 f97c 	bl	8000c58 <setTimer3>
  index_led = 0;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <main+0x88>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
  while (1)
  {
	  fsm_automatic_run1();
 8000966:	f7ff fbf1 	bl	800014c <fsm_automatic_run1>
	  fsm_automatic_run2();
 800096a:	f7ff fc43 	bl	80001f4 <fsm_automatic_run2>

	  if(timer3_flag == 1){
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <main+0x8c>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d10b      	bne.n	800098e <main+0x66>
		  update7SEG(index_led++);
 8000976:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <main+0x88>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	490c      	ldr	r1, [pc, #48]	; (80009b0 <main+0x88>)
 800097e:	600a      	str	r2, [r1, #0]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff0f 	bl	80007a4 <update7SEG>
		  setTimer3(500);
 8000986:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800098a:	f000 f965 	bl	8000c58 <setTimer3>
	  }

	  if(timer4_flag == 1){
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <main+0x90>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d1e7      	bne.n	8000966 <main+0x3e>
		  updateClockBuffer();
 8000996:	f7ff ff9b 	bl	80008d0 <updateClockBuffer>
		  setTimer4(1000);
 800099a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099e:	f000 f977 	bl	8000c90 <setTimer4>
	  fsm_automatic_run1();
 80009a2:	e7e0      	b.n	8000966 <main+0x3e>
 80009a4:	2000006c 	.word	0x2000006c
 80009a8:	20000038 	.word	0x20000038
 80009ac:	2000003c 	.word	0x2000003c
 80009b0:	20000048 	.word	0x20000048
 80009b4:	20000060 	.word	0x20000060
 80009b8:	20000068 	.word	0x20000068

080009bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b090      	sub	sp, #64	; 0x40
 80009c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c2:	f107 0318 	add.w	r3, r7, #24
 80009c6:	2228      	movs	r2, #40	; 0x28
 80009c8:	2100      	movs	r1, #0
 80009ca:	4618      	mov	r0, r3
 80009cc:	f001 fd64 	bl	8002498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d0:	1d3b      	adds	r3, r7, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
 80009da:	60da      	str	r2, [r3, #12]
 80009dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009de:	2302      	movs	r3, #2
 80009e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e2:	2301      	movs	r3, #1
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e6:	2310      	movs	r3, #16
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009ea:	2300      	movs	r3, #0
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0318 	add.w	r3, r7, #24
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fd74 	bl	80014e0 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009fe:	f000 f8ed 	bl	8000bdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 ffe0 	bl	80019e0 <HAL_RCC_ClockConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a26:	f000 f8d9 	bl	8000bdc <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	3740      	adds	r7, #64	; 0x40
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a48:	463b      	mov	r3, r7
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a5a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a68:	2209      	movs	r2, #9
 8000a6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6c:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a78:	4813      	ldr	r0, [pc, #76]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a7a:	f001 f90d 	bl	8001c98 <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a84:	f000 f8aa 	bl	8000bdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a8e:	f107 0308 	add.w	r3, r7, #8
 8000a92:	4619      	mov	r1, r3
 8000a94:	480c      	ldr	r0, [pc, #48]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000a96:	f001 fa8b 	bl	8001fb0 <HAL_TIM_ConfigClockSource>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000aa0:	f000 f89c 	bl	8000bdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	463b      	mov	r3, r7
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <MX_TIM2_Init+0x94>)
 8000ab2:	f001 fc63 	bl	800237c <HAL_TIMEx_MasterConfigSynchronization>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f88e 	bl	8000bdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	2000006c 	.word	0x2000006c

08000acc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4b35      	ldr	r3, [pc, #212]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a34      	ldr	r2, [pc, #208]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b32      	ldr	r3, [pc, #200]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af8:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a2e      	ldr	r2, [pc, #184]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b2c      	ldr	r3, [pc, #176]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b10:	4b29      	ldr	r3, [pc, #164]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a28      	ldr	r2, [pc, #160]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b26      	ldr	r3, [pc, #152]	; (8000bb8 <MX_GPIO_Init+0xec>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0308 	and.w	r3, r3, #8
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f64f 61fe 	movw	r1, #65278	; 0xfefe
 8000b2e:	4823      	ldr	r0, [pc, #140]	; (8000bbc <MX_GPIO_Init+0xf0>)
 8000b30:	f000 fcbe 	bl	80014b0 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
                          |SEG_5_Pin|SEG_6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|LED_11_Pin
 8000b34:	2200      	movs	r2, #0
 8000b36:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000b3a:	4821      	ldr	r0, [pc, #132]	; (8000bc0 <MX_GPIO_Init+0xf4>)
 8000b3c:	f000 fcb8 	bl	80014b0 <HAL_GPIO_WritePin>
                          |LED_12_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin|LED_2_YELLOW_Pin
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Button0_Pin */
  GPIO_InitStruct.Pin = Button0_Pin;
 8000b40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button0_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0310 	add.w	r3, r7, #16
 8000b52:	4619      	mov	r1, r3
 8000b54:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <MX_GPIO_Init+0xf8>)
 8000b56:	f000 fb31 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           LED_RED_Pin LED_YELLOW_Pin LED_GREEN_Pin SEG_0_Pin
                           SEG_1_Pin SEG_2_Pin SEG_3_Pin SEG_4_Pin
                           SEG_5_Pin SEG_6_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000b5a:	f64f 63fe 	movw	r3, #65278	; 0xfefe
 8000b5e:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_YELLOW_Pin|LED_GREEN_Pin|SEG_0_Pin
                          |SEG_1_Pin|SEG_2_Pin|SEG_3_Pin|SEG_4_Pin
                          |SEG_5_Pin|SEG_6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	4812      	ldr	r0, [pc, #72]	; (8000bbc <MX_GPIO_Init+0xf0>)
 8000b74:	f000 fb22 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_RED_Pin LED_1_GREEN_Pin LED_1_YELLOW_Pin LED_11_Pin
                           LED_12_Pin LED_2_RED_Pin LED_2_GREEN_Pin LED_2_YELLOW_Pin
                           LED_7_Pin LED_8_Pin LED_9_Pin LED_10_Pin */
  GPIO_InitStruct.Pin = LED_1_RED_Pin|LED_1_GREEN_Pin|LED_1_YELLOW_Pin|LED_11_Pin
 8000b78:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000b7c:	613b      	str	r3, [r7, #16]
                          |LED_12_Pin|LED_2_RED_Pin|LED_2_GREEN_Pin|LED_2_YELLOW_Pin
                          |LED_7_Pin|LED_8_Pin|LED_9_Pin|LED_10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2302      	movs	r3, #2
 8000b88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <MX_GPIO_Init+0xf4>)
 8000b92:	f000 fb13 	bl	80011bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8000b96:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_GPIO_Init+0xf4>)
 8000bac:	f000 fb06 	bl	80011bc <HAL_GPIO_Init>

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40021000 	.word	0x40021000
 8000bbc:	40010800 	.word	0x40010800
 8000bc0:	40010c00 	.word	0x40010c00
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	timerRun();
 8000bd0:	f000 f87a 	bl	8000cc8 <timerRun>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be0:	b672      	cpsid	i
}
 8000be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <Error_Handler+0x8>
	...

08000be8 <setTimer1>:
int timer3_flag = 0;

int timer4_counter = 0;
int timer4_flag = 0;

void setTimer1(int duration){
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <setTimer1+0x2c>)
 8000bf4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bf8:	1092      	asrs	r2, r2, #2
 8000bfa:	17db      	asrs	r3, r3, #31
 8000bfc:	1ad3      	subs	r3, r2, r3
 8000bfe:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <setTimer1+0x30>)
 8000c00:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000c02:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <setTimer1+0x34>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	66666667 	.word	0x66666667
 8000c18:	2000004c 	.word	0x2000004c
 8000c1c:	20000050 	.word	0x20000050

08000c20 <setTimer2>:

void setTimer2(int duration){
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <setTimer2+0x2c>)
 8000c2c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c30:	1092      	asrs	r2, r2, #2
 8000c32:	17db      	asrs	r3, r3, #31
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <setTimer2+0x30>)
 8000c38:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <setTimer2+0x34>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	66666667 	.word	0x66666667
 8000c50:	20000054 	.word	0x20000054
 8000c54:	20000058 	.word	0x20000058

08000c58 <setTimer3>:

void setTimer3(int duration){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <setTimer3+0x2c>)
 8000c64:	fb82 1203 	smull	r1, r2, r2, r3
 8000c68:	1092      	asrs	r2, r2, #2
 8000c6a:	17db      	asrs	r3, r3, #31
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	4a06      	ldr	r2, [pc, #24]	; (8000c88 <setTimer3+0x30>)
 8000c70:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <setTimer3+0x34>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	66666667 	.word	0x66666667
 8000c88:	2000005c 	.word	0x2000005c
 8000c8c:	20000060 	.word	0x20000060

08000c90 <setTimer4>:

void setTimer4(int duration){
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <setTimer4+0x2c>)
 8000c9c:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca0:	1092      	asrs	r2, r2, #2
 8000ca2:	17db      	asrs	r3, r3, #31
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	4a06      	ldr	r2, [pc, #24]	; (8000cc0 <setTimer4+0x30>)
 8000ca8:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <setTimer4+0x34>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	66666667 	.word	0x66666667
 8000cc0:	20000064 	.word	0x20000064
 8000cc4:	20000068 	.word	0x20000068

08000cc8 <timerRun>:

void timerRun(){
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8000ccc:	4b21      	ldr	r3, [pc, #132]	; (8000d54 <timerRun+0x8c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	dd0b      	ble.n	8000cec <timerRun+0x24>
		timer1_counter--;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <timerRun+0x8c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <timerRun+0x8c>)
 8000cdc:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8000cde:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <timerRun+0x8c>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	dc02      	bgt.n	8000cec <timerRun+0x24>
			timer1_flag = 1;
 8000ce6:	4b1c      	ldr	r3, [pc, #112]	; (8000d58 <timerRun+0x90>)
 8000ce8:	2201      	movs	r2, #1
 8000cea:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0){
 8000cec:	4b1b      	ldr	r3, [pc, #108]	; (8000d5c <timerRun+0x94>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	dd0b      	ble.n	8000d0c <timerRun+0x44>
		timer2_counter--;
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <timerRun+0x94>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <timerRun+0x94>)
 8000cfc:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8000cfe:	4b17      	ldr	r3, [pc, #92]	; (8000d5c <timerRun+0x94>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	dc02      	bgt.n	8000d0c <timerRun+0x44>
			timer2_flag = 1;
 8000d06:	4b16      	ldr	r3, [pc, #88]	; (8000d60 <timerRun+0x98>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0){
 8000d0c:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <timerRun+0x9c>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	dd0b      	ble.n	8000d2c <timerRun+0x64>
		timer3_counter--;
 8000d14:	4b13      	ldr	r3, [pc, #76]	; (8000d64 <timerRun+0x9c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	3b01      	subs	r3, #1
 8000d1a:	4a12      	ldr	r2, [pc, #72]	; (8000d64 <timerRun+0x9c>)
 8000d1c:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8000d1e:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <timerRun+0x9c>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	dc02      	bgt.n	8000d2c <timerRun+0x64>
			timer3_flag = 1;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <timerRun+0xa0>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer4_counter > 0){
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <timerRun+0xa4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	dd0b      	ble.n	8000d4c <timerRun+0x84>
		timer4_counter--;
 8000d34:	4b0d      	ldr	r3, [pc, #52]	; (8000d6c <timerRun+0xa4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	4a0c      	ldr	r2, [pc, #48]	; (8000d6c <timerRun+0xa4>)
 8000d3c:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8000d3e:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <timerRun+0xa4>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dc02      	bgt.n	8000d4c <timerRun+0x84>
			timer4_flag = 1;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <timerRun+0xa8>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	2000004c 	.word	0x2000004c
 8000d58:	20000050 	.word	0x20000050
 8000d5c:	20000054 	.word	0x20000054
 8000d60:	20000058 	.word	0x20000058
 8000d64:	2000005c 	.word	0x2000005c
 8000d68:	20000060 	.word	0x20000060
 8000d6c:	20000064 	.word	0x20000064
 8000d70:	20000068 	.word	0x20000068

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d7a:	4b15      	ldr	r3, [pc, #84]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	4a0e      	ldr	r2, [pc, #56]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	61d3      	str	r3, [r2, #28]
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <HAL_MspInit+0x5c>)
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	4a04      	ldr	r2, [pc, #16]	; (8000dd4 <HAL_MspInit+0x60>)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	40010000 	.word	0x40010000

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000de8:	d113      	bne.n	8000e12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_TIM_Base_MspInit+0x44>)
 8000dec:	69db      	ldr	r3, [r3, #28]
 8000dee:	4a0b      	ldr	r2, [pc, #44]	; (8000e1c <HAL_TIM_Base_MspInit+0x44>)
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	61d3      	str	r3, [r2, #28]
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_TIM_Base_MspInit+0x44>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2100      	movs	r1, #0
 8000e06:	201c      	movs	r0, #28
 8000e08:	f000 f9a1 	bl	800114e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e0c:	201c      	movs	r0, #28
 8000e0e:	f000 f9ba 	bl	8001186 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <NMI_Handler+0x4>

08000e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <HardFault_Handler+0x4>

08000e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <MemManage_Handler+0x4>

08000e32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	e7fe      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc80      	pop	{r7}
 8000e48:	4770      	bx	lr

08000e4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr

08000e56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bc80      	pop	{r7}
 8000e60:	4770      	bx	lr

08000e62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e66:	f000 f87f 	bl	8000f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <TIM2_IRQHandler+0x10>)
 8000e76:	f000 ffab 	bl	8001dd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	2000006c 	.word	0x2000006c

08000e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr

08000e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e90:	f7ff fff8 	bl	8000e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e94:	480b      	ldr	r0, [pc, #44]	; (8000ec4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e96:	490c      	ldr	r1, [pc, #48]	; (8000ec8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eac:	4c09      	ldr	r4, [pc, #36]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eba:	f001 fac9 	bl	8002450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ebe:	f7ff fd33 	bl	8000928 <main>
  bx lr
 8000ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ec8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ecc:	080024ec 	.word	0x080024ec
  ldr r2, =_sbss
 8000ed0:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ed4:	200000b8 	.word	0x200000b8

08000ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ed8:	e7fe      	b.n	8000ed8 <ADC1_2_IRQHandler>
	...

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <HAL_Init+0x28>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	; (8000f04 <HAL_Init+0x28>)
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f923 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	200f      	movs	r0, #15
 8000ef4:	f000 f808 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f7ff ff3c 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000efc:	2300      	movs	r3, #0
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40022000 	.word	0x40022000

08000f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x54>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_InitTick+0x58>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f93b 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e00e      	b.n	8000f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b0f      	cmp	r3, #15
 8000f3a:	d80a      	bhi.n	8000f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	f04f 30ff 	mov.w	r0, #4294967295
 8000f44:	f000 f903 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f48:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <HAL_InitTick+0x5c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e000      	b.n	8000f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	20000010 	.word	0x20000010
 8000f60:	20000018 	.word	0x20000018
 8000f64:	20000014 	.word	0x20000014

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <HAL_IncTick+0x1c>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <HAL_IncTick+0x20>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a03      	ldr	r2, [pc, #12]	; (8000f88 <HAL_IncTick+0x20>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bc80      	pop	{r7}
 8000f82:	4770      	bx	lr
 8000f84:	20000018 	.word	0x20000018
 8000f88:	200000b4 	.word	0x200000b4

08000f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b02      	ldr	r3, [pc, #8]	; (8000f9c <HAL_GetTick+0x10>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	200000b4 	.word	0x200000b4

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4906      	ldr	r1, [pc, #24]	; (8001038 <__NVIC_EnableIRQ+0x34>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	bc80      	pop	{r7}
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100

0800103c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	db0a      	blt.n	8001066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	b2da      	uxtb	r2, r3
 8001054:	490c      	ldr	r1, [pc, #48]	; (8001088 <__NVIC_SetPriority+0x4c>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	0112      	lsls	r2, r2, #4
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	440b      	add	r3, r1
 8001060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001064:	e00a      	b.n	800107c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4908      	ldr	r1, [pc, #32]	; (800108c <__NVIC_SetPriority+0x50>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	3b04      	subs	r3, #4
 8001074:	0112      	lsls	r2, r2, #4
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	440b      	add	r3, r1
 800107a:	761a      	strb	r2, [r3, #24]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	bc80      	pop	{r7}
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	f04f 32ff 	mov.w	r2, #4294967295
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43da      	mvns	r2, r3
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	401a      	ands	r2, r3
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d8:	f04f 31ff 	mov.w	r1, #4294967295
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa01 f303 	lsl.w	r3, r1, r3
 80010e2:	43d9      	mvns	r1, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	4313      	orrs	r3, r2
         );
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f7ff ff90 	bl	800103c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff2d 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff42 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff90 	bl	8001090 <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5f 	bl	800103c <__NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff35 	bl	8001004 <__NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b08b      	sub	sp, #44	; 0x2c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e148      	b.n	8001462 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d0:	2201      	movs	r2, #1
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8137 	bne.w	800145c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4aa3      	ldr	r2, [pc, #652]	; (8001480 <HAL_GPIO_Init+0x2c4>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d05e      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 80011f8:	4aa1      	ldr	r2, [pc, #644]	; (8001480 <HAL_GPIO_Init+0x2c4>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d875      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 80011fe:	4aa1      	ldr	r2, [pc, #644]	; (8001484 <HAL_GPIO_Init+0x2c8>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d058      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001204:	4a9f      	ldr	r2, [pc, #636]	; (8001484 <HAL_GPIO_Init+0x2c8>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d86f      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 800120a:	4a9f      	ldr	r2, [pc, #636]	; (8001488 <HAL_GPIO_Init+0x2cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d052      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001210:	4a9d      	ldr	r2, [pc, #628]	; (8001488 <HAL_GPIO_Init+0x2cc>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d869      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001216:	4a9d      	ldr	r2, [pc, #628]	; (800148c <HAL_GPIO_Init+0x2d0>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d04c      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 800121c:	4a9b      	ldr	r2, [pc, #620]	; (800148c <HAL_GPIO_Init+0x2d0>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d863      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001222:	4a9b      	ldr	r2, [pc, #620]	; (8001490 <HAL_GPIO_Init+0x2d4>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d046      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001228:	4a99      	ldr	r2, [pc, #612]	; (8001490 <HAL_GPIO_Init+0x2d4>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d85d      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 800122e:	2b12      	cmp	r3, #18
 8001230:	d82a      	bhi.n	8001288 <HAL_GPIO_Init+0xcc>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d859      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <HAL_GPIO_Init+0x80>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	080012b7 	.word	0x080012b7
 8001240:	08001291 	.word	0x08001291
 8001244:	080012a3 	.word	0x080012a3
 8001248:	080012e5 	.word	0x080012e5
 800124c:	080012eb 	.word	0x080012eb
 8001250:	080012eb 	.word	0x080012eb
 8001254:	080012eb 	.word	0x080012eb
 8001258:	080012eb 	.word	0x080012eb
 800125c:	080012eb 	.word	0x080012eb
 8001260:	080012eb 	.word	0x080012eb
 8001264:	080012eb 	.word	0x080012eb
 8001268:	080012eb 	.word	0x080012eb
 800126c:	080012eb 	.word	0x080012eb
 8001270:	080012eb 	.word	0x080012eb
 8001274:	080012eb 	.word	0x080012eb
 8001278:	080012eb 	.word	0x080012eb
 800127c:	080012eb 	.word	0x080012eb
 8001280:	08001299 	.word	0x08001299
 8001284:	080012ad 	.word	0x080012ad
 8001288:	4a82      	ldr	r2, [pc, #520]	; (8001494 <HAL_GPIO_Init+0x2d8>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800128e:	e02c      	b.n	80012ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e029      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e024      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	3308      	adds	r3, #8
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e01f      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	330c      	adds	r3, #12
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e01a      	b.n	80012ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012be:	2304      	movs	r3, #4
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e013      	b.n	80012ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	611a      	str	r2, [r3, #16]
          break;
 80012d6:	e009      	b.n	80012ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	615a      	str	r2, [r3, #20]
          break;
 80012e2:	e003      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x130>
          break;
 80012ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d801      	bhi.n	80012f6 <HAL_GPIO_Init+0x13a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	e001      	b.n	80012fa <HAL_GPIO_Init+0x13e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3304      	adds	r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d802      	bhi.n	8001308 <HAL_GPIO_Init+0x14c>
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x152>
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	3b08      	subs	r3, #8
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	210f      	movs	r1, #15
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	6a39      	ldr	r1, [r7, #32]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 8090 	beq.w	800145c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800133c:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a55      	ldr	r2, [pc, #340]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b53      	ldr	r3, [pc, #332]	; (8001498 <HAL_GPIO_Init+0x2dc>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001354:	4a51      	ldr	r2, [pc, #324]	; (800149c <HAL_GPIO_Init+0x2e0>)
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <HAL_GPIO_Init+0x2e4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d00d      	beq.n	800139c <HAL_GPIO_Init+0x1e0>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a48      	ldr	r2, [pc, #288]	; (80014a4 <HAL_GPIO_Init+0x2e8>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d007      	beq.n	8001398 <HAL_GPIO_Init+0x1dc>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a47      	ldr	r2, [pc, #284]	; (80014a8 <HAL_GPIO_Init+0x2ec>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d101      	bne.n	8001394 <HAL_GPIO_Init+0x1d8>
 8001390:	2302      	movs	r3, #2
 8001392:	e004      	b.n	800139e <HAL_GPIO_Init+0x1e2>
 8001394:	2303      	movs	r3, #3
 8001396:	e002      	b.n	800139e <HAL_GPIO_Init+0x1e2>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <HAL_GPIO_Init+0x1e2>
 800139c:	2300      	movs	r3, #0
 800139e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a0:	f002 0203 	and.w	r2, r2, #3
 80013a4:	0092      	lsls	r2, r2, #2
 80013a6:	4093      	lsls	r3, r2
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ae:	493b      	ldr	r1, [pc, #236]	; (800149c <HAL_GPIO_Init+0x2e0>)
 80013b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b2:	089b      	lsrs	r3, r3, #2
 80013b4:	3302      	adds	r3, #2
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c8:	4b38      	ldr	r3, [pc, #224]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	4937      	ldr	r1, [pc, #220]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]
 80013d4:	e006      	b.n	80013e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013d6:	4b35      	ldr	r3, [pc, #212]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	43db      	mvns	r3, r3
 80013de:	4933      	ldr	r1, [pc, #204]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 80013e0:	4013      	ands	r3, r2
 80013e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d006      	beq.n	80013fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013f0:	4b2e      	ldr	r3, [pc, #184]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	492d      	ldr	r1, [pc, #180]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	60cb      	str	r3, [r1, #12]
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001400:	68da      	ldr	r2, [r3, #12]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	43db      	mvns	r3, r3
 8001406:	4929      	ldr	r1, [pc, #164]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001408:	4013      	ands	r3, r2
 800140a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d006      	beq.n	8001426 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 800141a:	685a      	ldr	r2, [r3, #4]
 800141c:	4923      	ldr	r1, [pc, #140]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 800141e:	69bb      	ldr	r3, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	604b      	str	r3, [r1, #4]
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	43db      	mvns	r3, r3
 800142e:	491f      	ldr	r1, [pc, #124]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001430:	4013      	ands	r3, r2
 8001432:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4919      	ldr	r1, [pc, #100]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4915      	ldr	r1, [pc, #84]	; (80014ac <HAL_GPIO_Init+0x2f0>)
 8001458:	4013      	ands	r3, r2
 800145a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	3301      	adds	r3, #1
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
 800146c:	2b00      	cmp	r3, #0
 800146e:	f47f aeaf 	bne.w	80011d0 <HAL_GPIO_Init+0x14>
  }
}
 8001472:	bf00      	nop
 8001474:	bf00      	nop
 8001476:	372c      	adds	r7, #44	; 0x2c
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	10320000 	.word	0x10320000
 8001484:	10310000 	.word	0x10310000
 8001488:	10220000 	.word	0x10220000
 800148c:	10210000 	.word	0x10210000
 8001490:	10120000 	.word	0x10120000
 8001494:	10110000 	.word	0x10110000
 8001498:	40021000 	.word	0x40021000
 800149c:	40010000 	.word	0x40010000
 80014a0:	40010800 	.word	0x40010800
 80014a4:	40010c00 	.word	0x40010c00
 80014a8:	40011000 	.word	0x40011000
 80014ac:	40010400 	.word	0x40010400

080014b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	807b      	strh	r3, [r7, #2]
 80014bc:	4613      	mov	r3, r2
 80014be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014c0:	787b      	ldrb	r3, [r7, #1]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014cc:	e003      	b.n	80014d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	041a      	lsls	r2, r3, #16
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	611a      	str	r2, [r3, #16]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e26c      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	f000 8087 	beq.w	800160e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001500:	4b92      	ldr	r3, [pc, #584]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b04      	cmp	r3, #4
 800150a:	d00c      	beq.n	8001526 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800150c:	4b8f      	ldr	r3, [pc, #572]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f003 030c 	and.w	r3, r3, #12
 8001514:	2b08      	cmp	r3, #8
 8001516:	d112      	bne.n	800153e <HAL_RCC_OscConfig+0x5e>
 8001518:	4b8c      	ldr	r3, [pc, #560]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001524:	d10b      	bne.n	800153e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001526:	4b89      	ldr	r3, [pc, #548]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d06c      	beq.n	800160c <HAL_RCC_OscConfig+0x12c>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d168      	bne.n	800160c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e246      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001546:	d106      	bne.n	8001556 <HAL_RCC_OscConfig+0x76>
 8001548:	4b80      	ldr	r3, [pc, #512]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a7f      	ldr	r2, [pc, #508]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800154e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	e02e      	b.n	80015b4 <HAL_RCC_OscConfig+0xd4>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10c      	bne.n	8001578 <HAL_RCC_OscConfig+0x98>
 800155e:	4b7b      	ldr	r3, [pc, #492]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a7a      	ldr	r2, [pc, #488]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b78      	ldr	r3, [pc, #480]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a77      	ldr	r2, [pc, #476]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001570:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	e01d      	b.n	80015b4 <HAL_RCC_OscConfig+0xd4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0xbc>
 8001582:	4b72      	ldr	r3, [pc, #456]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a71      	ldr	r2, [pc, #452]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001588:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	4b6f      	ldr	r3, [pc, #444]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a6e      	ldr	r2, [pc, #440]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0xd4>
 800159c:	4b6b      	ldr	r3, [pc, #428]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a6a      	ldr	r2, [pc, #424]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80015a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b68      	ldr	r3, [pc, #416]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a67      	ldr	r2, [pc, #412]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80015ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d013      	beq.n	80015e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015bc:	f7ff fce6 	bl	8000f8c <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c4:	f7ff fce2 	bl	8000f8c <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b64      	cmp	r3, #100	; 0x64
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e1fa      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b5d      	ldr	r3, [pc, #372]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0f0      	beq.n	80015c4 <HAL_RCC_OscConfig+0xe4>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e4:	f7ff fcd2 	bl	8000f8c <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015ec:	f7ff fcce 	bl	8000f8c <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b64      	cmp	r3, #100	; 0x64
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e1e6      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fe:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1f0      	bne.n	80015ec <HAL_RCC_OscConfig+0x10c>
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800160c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0302 	and.w	r3, r3, #2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d063      	beq.n	80016e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800161a:	4b4c      	ldr	r3, [pc, #304]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f003 030c 	and.w	r3, r3, #12
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00b      	beq.n	800163e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001626:	4b49      	ldr	r3, [pc, #292]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d11c      	bne.n	800166c <HAL_RCC_OscConfig+0x18c>
 8001632:	4b46      	ldr	r3, [pc, #280]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d116      	bne.n	800166c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163e:	4b43      	ldr	r3, [pc, #268]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d005      	beq.n	8001656 <HAL_RCC_OscConfig+0x176>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d001      	beq.n	8001656 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e1ba      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001656:	4b3d      	ldr	r3, [pc, #244]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4939      	ldr	r1, [pc, #228]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001666:	4313      	orrs	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800166a:	e03a      	b.n	80016e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d020      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001674:	4b36      	ldr	r3, [pc, #216]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 8001676:	2201      	movs	r2, #1
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fc87 	bl	8000f8c <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fc83 	bl	8000f8c <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e19b      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001694:	4b2d      	ldr	r3, [pc, #180]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b2a      	ldr	r3, [pc, #168]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	4927      	ldr	r1, [pc, #156]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	600b      	str	r3, [r1, #0]
 80016b4:	e015      	b.n	80016e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_RCC_OscConfig+0x270>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fc66 	bl	8000f8c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016c4:	f7ff fc62 	bl	8000f8c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e17a      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0308 	and.w	r3, r3, #8
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d03a      	beq.n	8001764 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d019      	beq.n	800172a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f6:	4b17      	ldr	r3, [pc, #92]	; (8001754 <HAL_RCC_OscConfig+0x274>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fc:	f7ff fc46 	bl	8000f8c <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fc42 	bl	8000f8c <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e15a      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <HAL_RCC_OscConfig+0x26c>)
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001722:	2001      	movs	r0, #1
 8001724:	f000 fa9a 	bl	8001c5c <RCC_Delay>
 8001728:	e01c      	b.n	8001764 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172a:	4b0a      	ldr	r3, [pc, #40]	; (8001754 <HAL_RCC_OscConfig+0x274>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001730:	f7ff fc2c 	bl	8000f8c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001736:	e00f      	b.n	8001758 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fc28 	bl	8000f8c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d908      	bls.n	8001758 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e140      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	42420000 	.word	0x42420000
 8001754:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b9e      	ldr	r3, [pc, #632]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1e9      	bne.n	8001738 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80a6 	beq.w	80018be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b97      	ldr	r3, [pc, #604]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10d      	bne.n	800179e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b94      	ldr	r3, [pc, #592]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a93      	ldr	r2, [pc, #588]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b91      	ldr	r3, [pc, #580]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d118      	bne.n	80017dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b8b      	ldr	r3, [pc, #556]	; (80019d8 <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a8a      	ldr	r2, [pc, #552]	; (80019d8 <HAL_RCC_OscConfig+0x4f8>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbe9 	bl	8000f8c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017be:	f7ff fbe5 	bl	8000f8c <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b64      	cmp	r3, #100	; 0x64
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0fd      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d0:	4b81      	ldr	r3, [pc, #516]	; (80019d8 <HAL_RCC_OscConfig+0x4f8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0f0      	beq.n	80017be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d106      	bne.n	80017f2 <HAL_RCC_OscConfig+0x312>
 80017e4:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4a7a      	ldr	r2, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	6213      	str	r3, [r2, #32]
 80017f0:	e02d      	b.n	800184e <HAL_RCC_OscConfig+0x36e>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_RCC_OscConfig+0x334>
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	6a1b      	ldr	r3, [r3, #32]
 80017fe:	4a75      	ldr	r2, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001800:	f023 0301 	bic.w	r3, r3, #1
 8001804:	6213      	str	r3, [r2, #32]
 8001806:	4b73      	ldr	r3, [pc, #460]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a72      	ldr	r2, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800180c:	f023 0304 	bic.w	r3, r3, #4
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	e01c      	b.n	800184e <HAL_RCC_OscConfig+0x36e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b05      	cmp	r3, #5
 800181a:	d10c      	bne.n	8001836 <HAL_RCC_OscConfig+0x356>
 800181c:	4b6d      	ldr	r3, [pc, #436]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800181e:	6a1b      	ldr	r3, [r3, #32]
 8001820:	4a6c      	ldr	r2, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001822:	f043 0304 	orr.w	r3, r3, #4
 8001826:	6213      	str	r3, [r2, #32]
 8001828:	4b6a      	ldr	r3, [pc, #424]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800182a:	6a1b      	ldr	r3, [r3, #32]
 800182c:	4a69      	ldr	r2, [pc, #420]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6213      	str	r3, [r2, #32]
 8001834:	e00b      	b.n	800184e <HAL_RCC_OscConfig+0x36e>
 8001836:	4b67      	ldr	r3, [pc, #412]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a66      	ldr	r2, [pc, #408]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800183c:	f023 0301 	bic.w	r3, r3, #1
 8001840:	6213      	str	r3, [r2, #32]
 8001842:	4b64      	ldr	r3, [pc, #400]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	6a1b      	ldr	r3, [r3, #32]
 8001846:	4a63      	ldr	r2, [pc, #396]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	f023 0304 	bic.w	r3, r3, #4
 800184c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d015      	beq.n	8001882 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001856:	f7ff fb99 	bl	8000f8c <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800185c:	e00a      	b.n	8001874 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185e:	f7ff fb95 	bl	8000f8c <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	f241 3288 	movw	r2, #5000	; 0x1388
 800186c:	4293      	cmp	r3, r2
 800186e:	d901      	bls.n	8001874 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001870:	2303      	movs	r3, #3
 8001872:	e0ab      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001874:	4b57      	ldr	r3, [pc, #348]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ee      	beq.n	800185e <HAL_RCC_OscConfig+0x37e>
 8001880:	e014      	b.n	80018ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001882:	f7ff fb83 	bl	8000f8c <HAL_GetTick>
 8001886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001888:	e00a      	b.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188a:	f7ff fb7f 	bl	8000f8c <HAL_GetTick>
 800188e:	4602      	mov	r2, r0
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	f241 3288 	movw	r2, #5000	; 0x1388
 8001898:	4293      	cmp	r3, r2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e095      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a0:	4b4c      	ldr	r3, [pc, #304]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ee      	bne.n	800188a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018ac:	7dfb      	ldrb	r3, [r7, #23]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d105      	bne.n	80018be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018b2:	4b48      	ldr	r3, [pc, #288]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a47      	ldr	r2, [pc, #284]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80018b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f000 8081 	beq.w	80019ca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018c8:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f003 030c 	and.w	r3, r3, #12
 80018d0:	2b08      	cmp	r3, #8
 80018d2:	d061      	beq.n	8001998 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d146      	bne.n	800196a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018dc:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_RCC_OscConfig+0x4fc>)
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7ff fb53 	bl	8000f8c <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e8:	e008      	b.n	80018fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff fb4f 	bl	8000f8c <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d901      	bls.n	80018fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e067      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018fc:	4b35      	ldr	r3, [pc, #212]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f0      	bne.n	80018ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001910:	d108      	bne.n	8001924 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001912:	4b30      	ldr	r3, [pc, #192]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	492d      	ldr	r1, [pc, #180]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001924:	4b2b      	ldr	r3, [pc, #172]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a19      	ldr	r1, [r3, #32]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	430b      	orrs	r3, r1
 8001936:	4927      	ldr	r1, [pc, #156]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800193c:	4b27      	ldr	r3, [pc, #156]	; (80019dc <HAL_RCC_OscConfig+0x4fc>)
 800193e:	2201      	movs	r2, #1
 8001940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001942:	f7ff fb23 	bl	8000f8c <HAL_GetTick>
 8001946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194a:	f7ff fb1f 	bl	8000f8c <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e037      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800195c:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x46a>
 8001968:	e02f      	b.n	80019ca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196a:	4b1c      	ldr	r3, [pc, #112]	; (80019dc <HAL_RCC_OscConfig+0x4fc>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001970:	f7ff fb0c 	bl	8000f8c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fb08 	bl	8000f8c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e020      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x498>
 8001996:	e018      	b.n	80019ca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69db      	ldr	r3, [r3, #28]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e013      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_RCC_OscConfig+0x4f4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a1b      	ldr	r3, [r3, #32]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e000      	b.n	80019cc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40007000 	.word	0x40007000
 80019dc:	42420060 	.word	0x42420060

080019e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d101      	bne.n	80019f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e0d0      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f4:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d910      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a02:	4b67      	ldr	r3, [pc, #412]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f023 0207 	bic.w	r2, r3, #7
 8001a0a:	4965      	ldr	r1, [pc, #404]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a12:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	683a      	ldr	r2, [r7, #0]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d001      	beq.n	8001a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e0b8      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d020      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a3c:	4b59      	ldr	r3, [pc, #356]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4a58      	ldr	r2, [pc, #352]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a54:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4a52      	ldr	r2, [pc, #328]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a60:	4b50      	ldr	r3, [pc, #320]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	494d      	ldr	r1, [pc, #308]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d040      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	4b47      	ldr	r3, [pc, #284]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d115      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e07f      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d107      	bne.n	8001aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9e:	4b41      	ldr	r3, [pc, #260]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e073      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aae:	4b3d      	ldr	r3, [pc, #244]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06b      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001abe:	4b39      	ldr	r3, [pc, #228]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f023 0203 	bic.w	r2, r3, #3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4936      	ldr	r1, [pc, #216]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ad0:	f7ff fa5c 	bl	8000f8c <HAL_GetTick>
 8001ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	e00a      	b.n	8001aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f7ff fa58 	bl	8000f8c <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e053      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aee:	4b2d      	ldr	r3, [pc, #180]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	f003 020c 	and.w	r2, r3, #12
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1eb      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d210      	bcs.n	8001b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0e:	4b24      	ldr	r3, [pc, #144]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f023 0207 	bic.w	r2, r3, #7
 8001b16:	4922      	ldr	r1, [pc, #136]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b1e:	4b20      	ldr	r3, [pc, #128]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d001      	beq.n	8001b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	e032      	b.n	8001b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d008      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4916      	ldr	r1, [pc, #88]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d009      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	490e      	ldr	r1, [pc, #56]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b6e:	f000 f821 	bl	8001bb4 <HAL_RCC_GetSysClockFreq>
 8001b72:	4602      	mov	r2, r0
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	091b      	lsrs	r3, r3, #4
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	490a      	ldr	r1, [pc, #40]	; (8001ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	5ccb      	ldrb	r3, [r1, r3]
 8001b82:	fa22 f303 	lsr.w	r3, r2, r3
 8001b86:	4a09      	ldr	r2, [pc, #36]	; (8001bac <HAL_RCC_ClockConfig+0x1cc>)
 8001b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7ff f9ba 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40022000 	.word	0x40022000
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	080024c0 	.word	0x080024c0
 8001bac:	20000010 	.word	0x20000010
 8001bb0:	20000014 	.word	0x20000014

08001bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60fb      	str	r3, [r7, #12]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bce:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d002      	beq.n	8001be4 <HAL_RCC_GetSysClockFreq+0x30>
 8001bde:	2b08      	cmp	r3, #8
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_GetSysClockFreq+0x36>
 8001be2:	e027      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001be6:	613b      	str	r3, [r7, #16]
      break;
 8001be8:	e027      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	0c9b      	lsrs	r3, r3, #18
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d010      	beq.n	8001c24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c02:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0c5b      	lsrs	r3, r3, #17
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a0d      	ldr	r2, [pc, #52]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c16:	fb02 f203 	mul.w	r2, r2, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
 8001c22:	e004      	b.n	8001c2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a0c      	ldr	r2, [pc, #48]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	613b      	str	r3, [r7, #16]
      break;
 8001c32:	e002      	b.n	8001c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c34:	4b05      	ldr	r3, [pc, #20]	; (8001c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8001c36:	613b      	str	r3, [r7, #16]
      break;
 8001c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c3a:	693b      	ldr	r3, [r7, #16]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	371c      	adds	r7, #28
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bc80      	pop	{r7}
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	007a1200 	.word	0x007a1200
 8001c50:	080024d0 	.word	0x080024d0
 8001c54:	080024e0 	.word	0x080024e0
 8001c58:	003d0900 	.word	0x003d0900

08001c5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <RCC_Delay+0x34>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <RCC_Delay+0x38>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a5b      	lsrs	r3, r3, #9
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	fb02 f303 	mul.w	r3, r2, r3
 8001c76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c78:	bf00      	nop
  }
  while (Delay --);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1e5a      	subs	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f9      	bne.n	8001c78 <RCC_Delay+0x1c>
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3714      	adds	r7, #20
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr
 8001c90:	20000010 	.word	0x20000010
 8001c94:	10624dd3 	.word	0x10624dd3

08001c98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e041      	b.n	8001d2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff f88a 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	f000 fa56 	bl	8002188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d001      	beq.n	8001d50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e035      	b.n	8001dbc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a16      	ldr	r2, [pc, #88]	; (8001dc8 <HAL_TIM_Base_Start_IT+0x90>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d009      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x4e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d7a:	d004      	beq.n	8001d86 <HAL_TIM_Base_Start_IT+0x4e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <HAL_TIM_Base_Start_IT+0x94>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d111      	bne.n	8001daa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2b06      	cmp	r3, #6
 8001d96:	d010      	beq.n	8001dba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f042 0201 	orr.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da8:	e007      	b.n	8001dba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0201 	orr.w	r2, r2, #1
 8001db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bc80      	pop	{r7}
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40012c00 	.word	0x40012c00
 8001dcc:	40000400 	.word	0x40000400

08001dd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0202 	mvn.w	r2, #2
 8001e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f998 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f98b 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f99a 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d020      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01b      	beq.n	8001e80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0204 	mvn.w	r2, #4
 8001e50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2202      	movs	r2, #2
 8001e56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f000 f972 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001e6c:	e005      	b.n	8001e7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f965 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 f974 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d020      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	f003 0308 	and.w	r3, r3, #8
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d01b      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0208 	mvn.w	r2, #8
 8001e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f94c 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001eb8:	e005      	b.n	8001ec6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f93f 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f94e 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	f003 0310 	and.w	r3, r3, #16
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d020      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f003 0310 	and.w	r3, r3, #16
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d01b      	beq.n	8001f18 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f06f 0210 	mvn.w	r2, #16
 8001ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2208      	movs	r2, #8
 8001eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 f926 	bl	8002150 <HAL_TIM_IC_CaptureCallback>
 8001f04:	e005      	b.n	8001f12 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f000 f919 	bl	800213e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f928 	bl	8002162 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00c      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f06f 0201 	mvn.w	r2, #1
 8001f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe fe46 	bl	8000bc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00c      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d007      	beq.n	8001f60 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fa6f 	bl	800243e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d00c      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f000 f8f8 	bl	8002174 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	f003 0320 	and.w	r3, r3, #32
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d007      	beq.n	8001fa8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f06f 0220 	mvn.w	r2, #32
 8001fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fa42 	bl	800242c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fa8:	bf00      	nop
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_TIM_ConfigClockSource+0x1c>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e0b4      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x186>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002004:	d03e      	beq.n	8002084 <HAL_TIM_ConfigClockSource+0xd4>
 8002006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200a:	f200 8087 	bhi.w	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800200e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002012:	f000 8086 	beq.w	8002122 <HAL_TIM_ConfigClockSource+0x172>
 8002016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201a:	d87f      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800201c:	2b70      	cmp	r3, #112	; 0x70
 800201e:	d01a      	beq.n	8002056 <HAL_TIM_ConfigClockSource+0xa6>
 8002020:	2b70      	cmp	r3, #112	; 0x70
 8002022:	d87b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002024:	2b60      	cmp	r3, #96	; 0x60
 8002026:	d050      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0x11a>
 8002028:	2b60      	cmp	r3, #96	; 0x60
 800202a:	d877      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800202c:	2b50      	cmp	r3, #80	; 0x50
 800202e:	d03c      	beq.n	80020aa <HAL_TIM_ConfigClockSource+0xfa>
 8002030:	2b50      	cmp	r3, #80	; 0x50
 8002032:	d873      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002034:	2b40      	cmp	r3, #64	; 0x40
 8002036:	d058      	beq.n	80020ea <HAL_TIM_ConfigClockSource+0x13a>
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d86f      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800203c:	2b30      	cmp	r3, #48	; 0x30
 800203e:	d064      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	d86b      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 8002044:	2b20      	cmp	r3, #32
 8002046:	d060      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002048:	2b20      	cmp	r3, #32
 800204a:	d867      	bhi.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b00      	cmp	r3, #0
 800204e:	d05c      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d05a      	beq.n	800210a <HAL_TIM_ConfigClockSource+0x15a>
 8002054:	e062      	b.n	800211c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6899      	ldr	r1, [r3, #8]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f000 f96a 	bl	800233e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68ba      	ldr	r2, [r7, #8]
 8002080:	609a      	str	r2, [r3, #8]
      break;
 8002082:	e04f      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	6899      	ldr	r1, [r3, #8]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f000 f953 	bl	800233e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020a6:	609a      	str	r2, [r3, #8]
      break;
 80020a8:	e03c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	6859      	ldr	r1, [r3, #4]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	461a      	mov	r2, r3
 80020b8:	f000 f8ca 	bl	8002250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2150      	movs	r1, #80	; 0x50
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f921 	bl	800230a <TIM_ITRx_SetConfig>
      break;
 80020c8:	e02c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6859      	ldr	r1, [r3, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	461a      	mov	r2, r3
 80020d8:	f000 f8e8 	bl	80022ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2160      	movs	r1, #96	; 0x60
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f911 	bl	800230a <TIM_ITRx_SetConfig>
      break;
 80020e8:	e01c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6859      	ldr	r1, [r3, #4]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	461a      	mov	r2, r3
 80020f8:	f000 f8aa 	bl	8002250 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2140      	movs	r1, #64	; 0x40
 8002102:	4618      	mov	r0, r3
 8002104:	f000 f901 	bl	800230a <TIM_ITRx_SetConfig>
      break;
 8002108:	e00c      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4619      	mov	r1, r3
 8002114:	4610      	mov	r0, r2
 8002116:	f000 f8f8 	bl	800230a <TIM_ITRx_SetConfig>
      break;
 800211a:	e003      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      break;
 8002120:	e000      	b.n	8002124 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr

08002150 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	bc80      	pop	{r7}
 8002160:	4770      	bx	lr

08002162 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr
	...

08002188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a2b      	ldr	r2, [pc, #172]	; (8002248 <TIM_Base_SetConfig+0xc0>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <TIM_Base_SetConfig+0x28>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a6:	d003      	beq.n	80021b0 <TIM_Base_SetConfig+0x28>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a28      	ldr	r2, [pc, #160]	; (800224c <TIM_Base_SetConfig+0xc4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d108      	bne.n	80021c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	4313      	orrs	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a20      	ldr	r2, [pc, #128]	; (8002248 <TIM_Base_SetConfig+0xc0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d007      	beq.n	80021da <TIM_Base_SetConfig+0x52>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d0:	d003      	beq.n	80021da <TIM_Base_SetConfig+0x52>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <TIM_Base_SetConfig+0xc4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d108      	bne.n	80021ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695b      	ldr	r3, [r3, #20]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <TIM_Base_SetConfig+0xc0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d103      	bne.n	8002220 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d005      	beq.n	800223e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f023 0201 	bic.w	r2, r3, #1
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	611a      	str	r2, [r3, #16]
  }
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40000400 	.word	0x40000400

08002250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002250:	b480      	push	{r7}
 8002252:	b087      	sub	sp, #28
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	f023 0201 	bic.w	r2, r3, #1
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699b      	ldr	r3, [r3, #24]
 8002272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800227a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	693a      	ldr	r2, [r7, #16]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f023 030a 	bic.w	r3, r3, #10
 800228c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	4313      	orrs	r3, r2
 8002294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	621a      	str	r2, [r3, #32]
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b087      	sub	sp, #28
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f023 0210 	bic.w	r2, r3, #16
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	031b      	lsls	r3, r3, #12
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80022e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	621a      	str	r2, [r3, #32]
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800230a:	b480      	push	{r7}
 800230c:	b085      	sub	sp, #20
 800230e:	af00      	add	r7, sp, #0
 8002310:	6078      	str	r0, [r7, #4]
 8002312:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002320:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	f043 0307 	orr.w	r3, r3, #7
 800232c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68fa      	ldr	r2, [r7, #12]
 8002332:	609a      	str	r2, [r3, #8]
}
 8002334:	bf00      	nop
 8002336:	3714      	adds	r7, #20
 8002338:	46bd      	mov	sp, r7
 800233a:	bc80      	pop	{r7}
 800233c:	4770      	bx	lr

0800233e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800233e:	b480      	push	{r7}
 8002340:	b087      	sub	sp, #28
 8002342:	af00      	add	r7, sp, #0
 8002344:	60f8      	str	r0, [r7, #12]
 8002346:	60b9      	str	r1, [r7, #8]
 8002348:	607a      	str	r2, [r7, #4]
 800234a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002358:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	431a      	orrs	r2, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	4313      	orrs	r3, r2
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	609a      	str	r2, [r3, #8]
}
 8002372:	bf00      	nop
 8002374:	371c      	adds	r7, #28
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238c:	2b01      	cmp	r3, #1
 800238e:	d101      	bne.n	8002394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002390:	2302      	movs	r3, #2
 8002392:	e041      	b.n	8002418 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2202      	movs	r2, #2
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a14      	ldr	r2, [pc, #80]	; (8002424 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d009      	beq.n	80023ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023e0:	d004      	beq.n	80023ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a10      	ldr	r2, [pc, #64]	; (8002428 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d10c      	bne.n	8002406 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80023f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002416:	2300      	movs	r3, #0
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40012c00 	.word	0x40012c00
 8002428:	40000400 	.word	0x40000400

0800242c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr

0800243e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr

08002450 <__libc_init_array>:
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	2600      	movs	r6, #0
 8002454:	4d0c      	ldr	r5, [pc, #48]	; (8002488 <__libc_init_array+0x38>)
 8002456:	4c0d      	ldr	r4, [pc, #52]	; (800248c <__libc_init_array+0x3c>)
 8002458:	1b64      	subs	r4, r4, r5
 800245a:	10a4      	asrs	r4, r4, #2
 800245c:	42a6      	cmp	r6, r4
 800245e:	d109      	bne.n	8002474 <__libc_init_array+0x24>
 8002460:	f000 f822 	bl	80024a8 <_init>
 8002464:	2600      	movs	r6, #0
 8002466:	4d0a      	ldr	r5, [pc, #40]	; (8002490 <__libc_init_array+0x40>)
 8002468:	4c0a      	ldr	r4, [pc, #40]	; (8002494 <__libc_init_array+0x44>)
 800246a:	1b64      	subs	r4, r4, r5
 800246c:	10a4      	asrs	r4, r4, #2
 800246e:	42a6      	cmp	r6, r4
 8002470:	d105      	bne.n	800247e <__libc_init_array+0x2e>
 8002472:	bd70      	pop	{r4, r5, r6, pc}
 8002474:	f855 3b04 	ldr.w	r3, [r5], #4
 8002478:	4798      	blx	r3
 800247a:	3601      	adds	r6, #1
 800247c:	e7ee      	b.n	800245c <__libc_init_array+0xc>
 800247e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002482:	4798      	blx	r3
 8002484:	3601      	adds	r6, #1
 8002486:	e7f2      	b.n	800246e <__libc_init_array+0x1e>
 8002488:	080024e4 	.word	0x080024e4
 800248c:	080024e4 	.word	0x080024e4
 8002490:	080024e4 	.word	0x080024e4
 8002494:	080024e8 	.word	0x080024e8

08002498 <memset>:
 8002498:	4603      	mov	r3, r0
 800249a:	4402      	add	r2, r0
 800249c:	4293      	cmp	r3, r2
 800249e:	d100      	bne.n	80024a2 <memset+0xa>
 80024a0:	4770      	bx	lr
 80024a2:	f803 1b01 	strb.w	r1, [r3], #1
 80024a6:	e7f9      	b.n	800249c <memset+0x4>

080024a8 <_init>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr

080024b4 <_fini>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr
